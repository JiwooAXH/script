-- CLEANUP: Destroy old GUI if it exists
local playerGui = game:GetService("Players").LocalPlayer:FindFirstChild("PlayerGui")
local existing = playerGui and playerGui:FindFirstChild("AutoUpgrader")
if existing then
	existing:Destroy()
end

-- Services
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer

local RemoteFunctions = ReplicatedStorage:WaitForChild("RemoteFunctions")
local UpgradeUnit = RemoteFunctions:WaitForChild("UpgradeUnit")

-- State
local isAutoUpgrading = false
local selectedUnits = {}
local upgradeAll = false
local visualBoxes = {}

-- Get all units function (now detects units starting with "unit_" that have OwnedIndicator)
local function getAllUnits()
	local units = {}
	local entities = workspace:FindFirstChild("Map") and workspace.Map:FindFirstChild("Entities")
	if not entities then return {} end

	for _, unit in ipairs(entities:GetChildren()) do
		if unit:IsA("Model") and string.sub(unit.Name, 1, 5) == "unit_" then
			-- Check if this unit has an OwnedIndicator (meaning it's owned by the player)
			local ownedIndicator = unit:FindFirstChild("OwnedIndicator")
			if ownedIndicator then
				local id = unit:GetAttribute("ID")
				if id and typeof(id) == "number" then
					table.insert(units, {
						Name = unit.Name,
						ID = id,
						Model = unit
					})
				end
			end
		end
	end

	return units
end

-- Create visual box for selected unit
local function createVisualBox(unit)
	local model = unit.Model
	local humanoidRootPart = model:FindFirstChild("HumanoidRootPart") or model:FindFirstChild("Torso") or model:FindFirstChild("Part")
	if not humanoidRootPart then return end

	local box = Instance.new("SelectionBox")
	box.Adornee = model
	box.Color3 = Color3.fromRGB(0, 255, 0)
	box.LineThickness = 0.2
	box.Transparency = 0.7
	box.Parent = workspace

	visualBoxes[unit.ID] = box
end

-- Remove visual box
local function removeVisualBox(unitId)
	if visualBoxes[unitId] then
		visualBoxes[unitId]:Destroy()
		visualBoxes[unitId] = nil
	end
end

-- Clear all visual boxes
local function clearAllVisualBoxes()
	for id, box in pairs(visualBoxes) do
		box:Destroy()
	end
	visualBoxes = {}
end

-- Update visual boxes based on selection
local function updateVisualBoxes()
	clearAllVisualBoxes()
	
	if upgradeAll then
		local units = getAllUnits()
		for _, unit in ipairs(units) do
			createVisualBox(unit)
		end
	else
		local units = getAllUnits()
		for _, unit in ipairs(units) do
			if selectedUnits[unit.ID] then
				createVisualBox(unit)
			end
		end
	end
end

-- GUI Setup
local ScreenGui = Instance.new("ScreenGui", playerGui)
ScreenGui.Name = "AutoUpgrader"
ScreenGui.ResetOnSpawn = false

-- Toggle GUI Visibility Button (separate from main GUI)
local toggleGuiButton = Instance.new("TextButton")
toggleGuiButton.Size = UDim2.new(0, 30, 0, 30)
toggleGuiButton.Position = UDim2.new(1, -60, 0.5, -25) -- Right middle of screen
toggleGuiButton.BackgroundTransparency = 1
toggleGuiButton.Text = ""
toggleGuiButton.Active = true
toggleGuiButton.Parent = ScreenGui

-- Icon for toggle button
local toggleIcon = Instance.new("ImageLabel")
toggleIcon.Size = UDim2.new(1, 0, 1, 0)
toggleIcon.Position = UDim2.new(0, 0, 0, 0)
toggleIcon.BackgroundTransparency = 1
toggleIcon.Image = "rbxassetid://10723346871" -- ON icon (GUI visible)
toggleIcon.Parent = toggleGuiButton

-- State for GUI visibility
local isGuiVisible = true

local mainFrame = Instance.new("Frame")
mainFrame.Size = UDim2.new(0, 200, 0, 350)
mainFrame.Position = UDim2.new(0, 200, 0, 10)
mainFrame.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
mainFrame.BorderSizePixel = 0
mainFrame.Active = true
mainFrame.Parent = ScreenGui

-- Title
local titleLabel = Instance.new("TextLabel")
titleLabel.Size = UDim2.new(1, -20, 0, 30)
titleLabel.Position = UDim2.new(0, 10, 0, 5)
titleLabel.Text = "Auto Upgrader"
titleLabel.BackgroundTransparency = 1
titleLabel.TextColor3 = Color3.new(1, 1, 1)
titleLabel.Font = Enum.Font.GothamBold
titleLabel.TextSize = 16
titleLabel.Parent = mainFrame

-- Toggle Button
local toggleButton = Instance.new("TextButton")
toggleButton.Size = UDim2.new(1, -20, 0, 35)
toggleButton.Position = UDim2.new(0, 10, 0, 40)
toggleButton.Text = "🔴 OFF"
toggleButton.BackgroundColor3 = Color3.fromRGB(85, 20, 20)
toggleButton.TextColor3 = Color3.new(1, 1, 1)
toggleButton.Font = Enum.Font.Gotham
toggleButton.TextSize = 14
toggleButton.Parent = mainFrame

-- All Units Toggle
local allUnitsButton = Instance.new("TextButton")
allUnitsButton.Size = UDim2.new(1, -20, 0, 30)
allUnitsButton.Position = UDim2.new(0, 10, 0, 85)
allUnitsButton.Text = "Upgrade All: OFF"
allUnitsButton.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
allUnitsButton.TextColor3 = Color3.new(1, 1, 1)
allUnitsButton.Font = Enum.Font.Gotham
allUnitsButton.TextSize = 12
allUnitsButton.Parent = mainFrame

-- Unit Selection Label
local selectionLabel = Instance.new("TextLabel")
selectionLabel.Size = UDim2.new(1, -20, 0, 20)
selectionLabel.Position = UDim2.new(0, 10, 0, 125)
selectionLabel.Text = "Select Units:"
selectionLabel.BackgroundTransparency = 1
selectionLabel.TextColor3 = Color3.new(1, 1, 1)
selectionLabel.Font = Enum.Font.Gotham
selectionLabel.TextSize = 12
selectionLabel.Parent = mainFrame

-- Scrolling Frame for unit list
local scrollFrame = Instance.new("ScrollingFrame")
scrollFrame.Size = UDim2.new(1, -20, 0, 180)
scrollFrame.Position = UDim2.new(0, 10, 0, 150)
scrollFrame.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
scrollFrame.BorderSizePixel = 0
scrollFrame.ScrollBarThickness = 6
scrollFrame.Parent = mainFrame

-- Draggable GUI (Main Frame)
local dragging, dragInput, dragStart, startPos

mainFrame.InputBegan:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
		dragging = true
		dragStart = input.Position
		startPos = mainFrame.Position
		input.Changed:Connect(function()
			if input.UserInputState == Enum.UserInputState.End then
				dragging = false
			end
		end)
	end
end)

mainFrame.InputChanged:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
		dragInput = input
	end
end)

UserInputService.InputChanged:Connect(function(input)
	if input == dragInput and dragging then
		local delta = input.Position - dragStart
		mainFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
	end
end)

-- Draggable Toggle Button
local toggleDragging, toggleDragInput, toggleDragStart, toggleStartPos

toggleGuiButton.InputBegan:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
		toggleDragging = true
		toggleDragStart = input.Position
		toggleStartPos = toggleGuiButton.Position
		input.Changed:Connect(function()
			if input.UserInputState == Enum.UserInputState.End then
				toggleDragging = false
			end
		end)
	end
end)

toggleGuiButton.InputChanged:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
		toggleDragInput = input
	end
end)

UserInputService.InputChanged:Connect(function(input)
	if input == toggleDragInput and toggleDragging then
		local delta = input.Position - toggleDragStart
		toggleGuiButton.Position = UDim2.new(toggleStartPos.X.Scale, toggleStartPos.X.Offset + delta.X, toggleStartPos.Y.Scale, toggleStartPos.Y.Offset + delta.Y)
	end
end)

-- Toggle GUI Visibility Functionality
toggleGuiButton.MouseButton1Click:Connect(function()
	isGuiVisible = not isGuiVisible
	
	if isGuiVisible then
		mainFrame.Visible = true
		toggleIcon.Image = "rbxassetid://10723346871" -- ON icon
	else
		mainFrame.Visible = false
		toggleIcon.Image = "rbxassetid://10723346959" -- OFF icon
	end
end)

-- Update unit list in GUI
local function updateUnitList()
	-- Clear existing buttons
	for _, child in ipairs(scrollFrame:GetChildren()) do
		if child:IsA("TextButton") then
			child:Destroy()
		end
	end
	
	local units = getAllUnits()
	local yPosition = 0
	
	for i, unit in ipairs(units) do
		local unitButton = Instance.new("TextButton")
		unitButton.Size = UDim2.new(1, -10, 0, 30)
		unitButton.Position = UDim2.new(0, 5, 0, yPosition)
		
		local displayName = unit.Name:gsub("unit_", ""):gsub("_", " "):upper()
		local isSelected = selectedUnits[unit.ID] or upgradeAll
		
		unitButton.Text = (isSelected and "✓ " or "  ") .. displayName .. " (ID: " .. unit.ID .. ")"
		unitButton.BackgroundColor3 = isSelected and Color3.fromRGB(20, 85, 20) or Color3.fromRGB(50, 50, 50)
		unitButton.TextColor3 = Color3.new(1, 1, 1)
		unitButton.Font = Enum.Font.Gotham
		unitButton.TextSize = 11
		unitButton.TextXAlignment = Enum.TextXAlignment.Left
		unitButton.Parent = scrollFrame
		
		-- Button click handler
		unitButton.MouseButton1Click:Connect(function()
			if not upgradeAll then
				selectedUnits[unit.ID] = not selectedUnits[unit.ID]
				updateUnitList()
				updateVisualBoxes()
			end
		end)
		
		yPosition = yPosition + 35
	end
	
	scrollFrame.CanvasSize = UDim2.new(0, 0, 0, yPosition)
end

-- Toggle button functionality
toggleButton.MouseButton1Click:Connect(function()
	isAutoUpgrading = not isAutoUpgrading
	
	if isAutoUpgrading then
		toggleButton.Text = "🟢 ON"
		toggleButton.BackgroundColor3 = Color3.fromRGB(20, 85, 20)
	else
		toggleButton.Text = "🔴 OFF"
		toggleButton.BackgroundColor3 = Color3.fromRGB(85, 20, 20)
	end
end)

-- All units toggle functionality
allUnitsButton.MouseButton1Click:Connect(function()
	upgradeAll = not upgradeAll
	
	if upgradeAll then
		allUnitsButton.Text = "Upgrade All: ON"
		allUnitsButton.BackgroundColor3 = Color3.fromRGB(20, 85, 20)
		selectedUnits = {} -- Clear individual selections
	else
		allUnitsButton.Text = "Upgrade All: OFF"
		allUnitsButton.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
	end
	
	updateUnitList()
	updateVisualBoxes()
end)

-- Auto upgrade logic
local lastUpgradeTime = {}

local function shouldUpgradeUnit(unit)
	if not isAutoUpgrading then return false end
	
	local currentTime = tick()
	local lastTime = lastUpgradeTime[unit.ID] or 0
	
	-- Only upgrade every 2 seconds to prevent spam
	if currentTime - lastTime < 2 then return false end
	
	if upgradeAll then
		return true
	else
		return selectedUnits[unit.ID] == true
	end
end

-- Main upgrade loop
local upgradeConnection
upgradeConnection = RunService.Heartbeat:Connect(function()
	if not isAutoUpgrading then return end
	
	local units = getAllUnits()
	for _, unit in ipairs(units) do
		if shouldUpgradeUnit(unit) then
			local success, err = pcall(function()
				UpgradeUnit:InvokeServer(unit.ID)
				lastUpgradeTime[unit.ID] = tick()
				print("⬆️ Auto-upgraded:", unit.Name, "ID:", unit.ID)
			end)
			
			if not success then
				warn("❌ Failed to upgrade unit", unit.ID, ":", err)
			end
		end
	end
end)

-- Update unit list periodically
local updateConnection
updateConnection = RunService.Heartbeat:Connect(function()
	-- Update every 60 frames (about 1 second)
	if tick() % 1 < 0.016 then
		updateUnitList()
		updateVisualBoxes()
	end
end)

-- Initial update
updateUnitList()

-- Cleanup on GUI destruction
ScreenGui.AncestryChanged:Connect(function()
	if not ScreenGui.Parent then
		if upgradeConnection then
			upgradeConnection:Disconnect()
		end
		if updateConnection then
			updateConnection:Disconnect()
		end
		clearAllVisualBoxes()
	end
end)

print("🔧 Auto Upgrader loaded successfully!")
print("💡 Toggle ON/OFF to start/stop auto upgrading")
print("💡 Use 'Upgrade All' or select individual units")
print("💡 Green boxes show selected units")
print("🔍 Now detecting YOUR units (with OwnedIndicator) starting with 'unit_' in workspace.Map.Entities")
