-- MADE BY JIWOO
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Lighting = game:GetService("Lighting")

-- FullBright Functionality
if not _G.FullBrightExecuted then
    _G.FullBrightExecuted = true
    _G.FullBrightEnabled = false

    -- Store normal lighting settings in a table
    local NormalLightingSettings = {
        Brightness = Lighting.Brightness,
        ClockTime = Lighting.ClockTime,
        FogEnd = Lighting.FogEnd,
        GlobalShadows = Lighting.GlobalShadows,
        Ambient = Lighting.Ambient
    }

    -- Set default lighting values
    local function setFullBright()
        Lighting.Brightness = 1
        Lighting.ClockTime = 12
        Lighting.FogEnd = 786543
        Lighting.GlobalShadows = false
        Lighting.Ambient = Color3.fromRGB(178, 178, 178)
    end

    local function resetProperties()
        Lighting.Brightness = NormalLightingSettings.Brightness
        Lighting.ClockTime = NormalLightingSettings.ClockTime
        Lighting.FogEnd = NormalLightingSettings.FogEnd
        Lighting.GlobalShadows = NormalLightingSettings.GlobalShadows
        Lighting.Ambient = NormalLightingSettings.Ambient
    end

    -- Monitor Lighting property changes
    local function monitorLightingProperty(propertyName, defaultValue)
        Lighting:GetPropertyChangedSignal(propertyName):Connect(function()
            if Lighting[propertyName] ~= defaultValue then
                repeat wait() until _G.FullBrightEnabled
                Lighting[propertyName] = defaultValue
            end
        end)
    end

    -- Monitor relevant lighting properties
    monitorLightingProperty("Brightness", 1)
    monitorLightingProperty("ClockTime", 12)
    monitorLightingProperty("FogEnd", 786543)
    monitorLightingProperty("GlobalShadows", false)
    monitorLightingProperty("Ambient", Color3.fromRGB(178, 178, 178))

    -- Handle Atmosphere instances
    local function handleAtmosphere(instance)
        if instance:IsA("Atmosphere") then
            instance.Density = 0
            instance:GetPropertyChangedSignal("Density"):Connect(function()
                instance.Density = 0
            end)
        end
    end

    -- Set existing Atmosphere instances to density 0
    for _, v in ipairs(Lighting:GetDescendants()) do
        handleAtmosphere(v)
    end

    -- Handle new Atmosphere instances added to Lighting
    Lighting.DescendantAdded:Connect(handleAtmosphere)

    -- Toggle FullBright functionality
    spawn(function()
        while wait(1) do
            if _G.FullBrightEnabled then
                setFullBright()
            else
                resetProperties()
            end
        end
    end)
end

-- Toggle the FullBright functionality
_G.FullBrightEnabled = not _G.FullBrightEnabled

-- Function to create a label above an object with slightly larger text
local function createLabelWithLargerText(object, labelText, textColor)
    if object then
        local billboardGui = Instance.new("BillboardGui")
        local textLabel = Instance.new("TextLabel")

        billboardGui.Adornee = object
        billboardGui.Size = UDim2.new(0, 100, 0, 50)
        billboardGui.StudsOffset = Vector3.new(0, 3, 0)
        billboardGui.AlwaysOnTop = true

        textLabel.Parent = billboardGui
        textLabel.Size = UDim2.new(1, 0, 1, 0)
        textLabel.BackgroundTransparency = 1
        textLabel.Text = labelText
        textLabel.TextColor3 = textColor
        textLabel.Font = Enum.Font.SourceSans
        textLabel.TextSize = 10

        billboardGui.Parent = object
    else
        warn("Object not found for label: " .. tostring(labelText))
    end
end

-- Ghost Highlight Loop
local function maintainGhostHighlight()
    while true do
        wait(0.5)
        local ghostHighlight = workspace:FindFirstChild("Ghost") and workspace.Ghost:FindFirstChild("Highlight")
        if ghostHighlight then
            ghostHighlight.Enabled = true
        end
    end
end

-- Start the highlight maintenance in a separate coroutine
coroutine.wrap(maintainGhostHighlight)()

-- Create labels with larger text for specific objects
local function createLabels()
    local objects = {
        {name = "Ouija Board", path = workspace, color = Color3.fromRGB(218, 165, 32), label = "Ouija"},
        {name = "SummoningCircle", path = workspace, color = Color3.fromRGB(255, 0, 0), label = "Summoning Circle"},
        {name = "Tarot Cards", path = workspace.Map.Items, color = Color3.fromRGB(148, 0, 211), label = "Tarot"},
    }

    for _, obj in ipairs(objects) do
        local foundObject = obj.path:FindFirstChild(obj.name)
        if foundObject then
            createLabelWithLargerText(foundObject, obj.label, obj.color)
        else
            warn("Object not found: " .. obj.name)
        end
    end

    local generatorMesh = workspace.Map.Generators:FindFirstChild("GeneratorMesh")
    if generatorMesh then
        createLabelWithLargerText(generatorMesh, "Generator", Color3.fromRGB(255, 255, 255))
    else
        warn("GeneratorMesh not found in workspace.Map.Generators")
    end
end

-- Create labels for the specified objects
createLabels()

-- Player Highlighting
local localPlayer = Players.LocalPlayer
local playerHighlights = {}

local function highlightPlayer(player)
    if player.Character and player ~= localPlayer then
        if not playerHighlights[player] then
            local highlight = Instance.new("Highlight")
            highlight.FillColor = Color3.new(1, 1, 1)
            highlight.OutlineColor = Color3.new(0, 0, 0)
            highlight.OutlineTransparency = 0.9
            highlight.Parent = player.Character
            playerHighlights[player] = highlight
        end
    end
end

local function onPlayerAdded(player)
    highlightPlayer(player)
    
    player.CharacterAdded:Connect(function()
        highlightPlayer(player)
    end)
end

for _, player in pairs(Players:GetPlayers()) do
    onPlayerAdded(player)
end

Players.PlayerAdded:Connect(onPlayerAdded)

-- Tpwalk Variables
local ToggleTpwalk = false
local TpwalkSpeed = 1
local TpwalkConnection
local playerHumanoid = localPlayer.Character and localPlayer.Character:WaitForChild("Humanoid")
local playerHumanoidRootPart = localPlayer.Character and localPlayer.Character:WaitForChild("HumanoidRootPart")

-- Function to handle Tpwalk
local function startTpwalk()
    if not ToggleTpwalk then return end

    TpwalkConnection = RunService.RenderStepped:Connect(function()
        if playerHumanoid and playerHumanoidRootPart then
            local moveDirection = playerHumanoid.MoveDirection
            if moveDirection.Magnitude > 0 then
                playerHumanoidRootPart.CFrame = playerHumanoidRootPart.CFrame + (moveDirection * TpwalkSpeed)
            end
        end
    end)
end

local function stopTpwalk()
    if TpwalkConnection then
        TpwalkConnection:Disconnect()
        TpwalkConnection = nil
    end
end

-- Toggle Function for Tpwalk
local function toggleTpwalk()
    ToggleTpwalk = not ToggleTpwalk
    if ToggleTpwalk then
        startTpwalk()
    else
        stopTpwalk()
    end
end

-- Example of how to toggle Tpwalk (you can replace this with a UI button or keybind)
toggleTpwalk()
