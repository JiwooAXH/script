local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Window = Fluent:CreateWindow({
    Title = "Bubble Gum Simulator: INF",
    SubTitle = "   Made by: Yuki",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 350),
    Acrylic = true,
    Theme = "Darker",
    MinimizeKey = Enum.KeyCode.LeftControl
})

local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "home" }),
    Settings = Window:AddTab({ Title = "Settings", Icon = "settings" })
}

-- Auto Collect Coin
Tabs.Main:AddParagraph({
    Title = "Collect Coin",
    Content = "Coin will be automatically collected in range if you turn the toggle on."
})

local autoCollectEnabled = false
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")

local function getCharacter()
	local player = Players.LocalPlayer
	while not player.Character or not player.Character:FindFirstChild("HumanoidRootPart") do
		player.CharacterAdded:Wait()
	end
	return player.Character
end

local function getTargetFolder()
	local rendered = workspace:FindFirstChild("Rendered")
	if not rendered then return nil end
	local children = rendered:GetChildren()
	return children[12]
end

local function getTeleportPart(model)
	if model:IsA("Model") then
		if not model.PrimaryPart then
			for _, part in ipairs(model:GetDescendants()) do
				if part:IsA("BasePart") then
					model.PrimaryPart = part
					break
				end
			end
		end
		return model.PrimaryPart
	end
end

RunService.Heartbeat:Connect(function()
	if not autoCollectEnabled then return end

	local char = getCharacter()
	local root = char:FindFirstChild("HumanoidRootPart")
	local folder = getTargetFolder()
	if not root or not folder then return end

	for _, model in ipairs(folder:GetChildren()) do
		local part = getTeleportPart(model)
		if part then
			model:SetPrimaryPartCFrame(CFrame.new(
				root.Position + Vector3.new(math.random(-6,6), 0, math.random(-6,6))
			))
		end
	end
end)

Tabs.Main:AddToggle("AutoCollectToggle", {
	Title = "Auto Collect Coin",
	Default = false,
	Callback = function(value)
		autoCollectEnabled = value
	end
})

-- Auto Bubble Feature
Tabs.Main:AddParagraph({
    Title = "Bubble Actions",
    Content = "Automatically Blow or Sell bubble actions using the multi dropdown. You can select one or both."
})

local bubbleEnabled = false
local selectedBubbleActions = {}
local sellBubbleInterval = 0.5 -- Default interval in seconds for selling bubbles

local bubbleDropdown = Tabs.Main:AddDropdown("MultiDropdown", {
    Title = "Bubble Options",
    Description = "Select 'BlowBubble' and/or 'SellBubble'",
    Values = { "BlowBubble", "SellBubble" },
    Multi = true,
    Default = {},
})

bubbleDropdown:OnChanged(function(Value)
    selectedBubbleActions = {}
    for val, enabled in pairs(Value) do
        if enabled then
            table.insert(selectedBubbleActions, val)
        end
    end
end)

Tabs.Main:AddToggle("BubbleToggle", {
    Title = "Auto Bubble",
    Default = false,
    Callback = function(value)
        bubbleEnabled = value
    end
})

-- Add the custom sell interval input
Tabs.Main:AddInput("SellIntervalInput", {
    Title = "Sell Bubble Interval (seconds)",
    Default = "0.5",
    Placeholder = "Enter sell interval...",
    Numeric = true,
    Finished = true,
    Callback = function(value)
        local num = tonumber(value)
        if num and num > 0 then
            sellBubbleInterval = num
            Fluent:Notify({
                Title = "Sell Interval Updated",
                Content = "Bubble sell interval set to " .. num .. " seconds",
                Duration = 2
            })
        else
            Fluent:Notify({
                Title = "Invalid Input",
                Content = "Please enter a positive number",
                Duration = 2
            })
        end
    end
})

-- Modified bubble action task to use custom timer for SellBubble
task.spawn(function()
    while true do
        task.wait() -- Quick response time for bubble blowing
        if bubbleEnabled and #selectedBubbleActions > 0 then
            -- Handle blow bubble (always use quick response time)
            if table.find(selectedBubbleActions, "BlowBubble") then
                pcall(function()
                    game:GetService("ReplicatedStorage")
                        :WaitForChild("Shared")
                        :WaitForChild("Framework")
                        :WaitForChild("Network")
                        :WaitForChild("Remote")
                        :WaitForChild("Event")
                        :FireServer("BlowBubble")
                end)
            end
        end
    end
end)

-- Separate task for selling bubbles with custom timer
task.spawn(function()
    while true do
        if bubbleEnabled and table.find(selectedBubbleActions, "SellBubble") then
            pcall(function()
                game:GetService("ReplicatedStorage")
                    :WaitForChild("Shared")
                    :WaitForChild("Framework")
                    :WaitForChild("Network")
                    :WaitForChild("Remote")
                    :WaitForChild("Event")
                    :FireServer("SellBubble")
            end)
            task.wait(sellBubbleInterval) -- Use custom sell interval
        else
            task.wait(0.5) -- Check again after a short delay
        end
    end
end)

-- Mobile UI Toggle
Tabs.Settings:AddParagraph({
    Title = "Mobile UI Toggle",
    Content = "For mobile users: Click the button below to add a toggle button that lets you hide/show the GUI."
})

Tabs.Settings:AddButton({
    Title = "Load Mobile Toggle Button",
    Description = "Creates a small button to hide/show the GUI",
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/JiwooAXH/script/main/Toggle-GUi", true))()
        Fluent:Notify({
            Title = "Mobile Toggle Loaded",
            Content = "You can now use the toggle button to hide/show the GUI",
            Duration = 5
        })
    end
})

-- SaveManager Setup
InterfaceManager:SetLibrary(Fluent)
SaveManager:SetLibrary(Fluent)
SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({})

InterfaceManager:SetFolder("FluentScriptHub")
SaveManager:SetFolder("FluentScriptHub/example-config")

InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)

Window:SelectTab(1)

Fluent:Notify({
    Title = "Script Loaded",
    Content = "The script has been loaded successfully.",
    Duration = 3
})

SaveManager:LoadAutoloadConfig()
