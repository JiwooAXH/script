local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local TweenService = game:GetService("TweenService")

local Window = Fluent:CreateWindow({
    Title = "Bubble Gum Simulator: INF",
    SubTitle = " v1.3 • Made by: Yuki",
    TabWidth = 160,
    Size = UDim2.fromOffset(600, 380),
    Acrylic = true,
    Theme = "Darker",
    MinimizeKey = Enum.KeyCode.LeftControl
})

local Tabs = {
    Main = Window:AddTab({ Title = "︲Main", Icon = "home" }),
    Islands = Window:AddTab({ Title = "︲Islands", Icon = "globe" }),
    Claim = Window:AddTab({ Title = "︲Claim", Icon = "gift" }),
    Settings = Window:AddTab({ Title = "︲Settings", Icon = "settings" })
}

-- Main Tab Sections and Features
local MainCollectSection = Tabs.Main:AddSection("Coin Collection")

MainCollectSection:AddParagraph({
    Title = "Collect Coin",
    Content = "Coin will be automatically collected in range if you turn the toggle on."
})

local autoCollectEnabled = false
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")

local function getCharacter()
	local player = Players.LocalPlayer
	while not player.Character or not player.Character:FindFirstChild("HumanoidRootPart") do
		player.CharacterAdded:Wait()
	end
	return player.Character
end

local function getTargetFolder()
	local rendered = workspace:FindFirstChild("Rendered")
	if not rendered then return nil end
	local children = rendered:GetChildren()
	return children[12]
end

local function getTeleportPart(model)
	if model:IsA("Model") then
		if not model.PrimaryPart then
			for _, part in ipairs(model:GetDescendants()) do
				if part:IsA("BasePart") then
					model.PrimaryPart = part
					break
				end
			end
		end
		return model.PrimaryPart
	end
end

-- Improved coin collection with performance optimizations
local collectCooldown = 0
local collectInterval = 0.1 -- Reduced frequency to help with lag

RunService.Heartbeat:Connect(function()
	if not autoCollectEnabled then return end
	
	-- Add cooldown to reduce lag
	if tick() - collectCooldown < collectInterval then return end
	collectCooldown = tick()

	local char = getCharacter()
	local root = char:FindFirstChild("HumanoidRootPart")
	local folder = getTargetFolder()
	if not root or not folder then return end

	-- Process only a maximum of coins per frame to reduce lag
	local coinsToProcess = 5 
	local count = 0
	
	for _, model in ipairs(folder:GetChildren()) do
		if count >= coinsToProcess then break end
		
		local part = getTeleportPart(model)
		if part then
			model:SetPrimaryPartCFrame(CFrame.new(
				root.Position + Vector3.new(math.random(-6,6), 0, math.random(-6,6))
			))
			count = count + 1
		end
	end
end)

MainCollectSection:AddToggle("AutoCollectToggle", {
	Title = "Auto Collect Coin",
	Default = false,
	Callback = function(value)
		autoCollectEnabled = value
	end
})

-- Add coin collection performance settings
MainCollectSection:AddSlider("CollectionIntervalSlider", {
    Title = "Collection Interval",
    Description = "Higher values = less lag, slower collection",
    Default = 0.1,
    Min = 0.05,
    Max = 0.5,
    Rounding = 2,
    Callback = function(value)
        collectInterval = value
    end
})

-- Bubble Section
local MainBubbleSection = Tabs.Main:AddSection("Bubble Actions")

MainBubbleSection:AddParagraph({
    Title = "Bubble Actions",
    Content = "Automatically Blow or Sell bubble actions using the multi dropdown. You can select one or both."
})

local bubbleEnabled = false
local selectedBubbleActions = {}
local sellBubbleInterval = 0.5 -- Default interval in seconds for selling bubbles

local bubbleDropdown = MainBubbleSection:AddDropdown("MultiDropdown", {
    Title = "Bubble Options",
    Description = "Select 'BlowBubble' and/or 'SellBubble'",
    Values = { "BlowBubble", "SellBubble" },
    Multi = true,
    Default = {},
})

bubbleDropdown:OnChanged(function(Value)
    selectedBubbleActions = {}
    for val, enabled in pairs(Value) do
        if enabled then
            table.insert(selectedBubbleActions, val)
        end
    end
end)

MainBubbleSection:AddToggle("BubbleToggle", {
    Title = "Auto Bubble",
    Default = false,
    Callback = function(value)
        bubbleEnabled = value
    end
})

-- Add the custom sell interval input
MainBubbleSection:AddInput("SellIntervalInput", {
    Title = "Sell Bubble Interval (seconds)",
    Default = "0.5",
    Placeholder = "Enter sell interval...",
    Numeric = true,
    Finished = true,
    Callback = function(value)
        local num = tonumber(value)
        if num and num > 0 then
            sellBubbleInterval = num
            Fluent:Notify({
                Title = "Sell Interval Updated",
                Content = "Bubble sell interval set to " .. num .. " seconds",
                Duration = 2
            })
        else
            Fluent:Notify({
                Title = "Invalid Input",
                Content = "Please enter a positive number",
                Duration = 2
            })
        end
    end
})

-- Modified bubble action task to use custom timer for SellBubble
task.spawn(function()
    while true do
        task.wait() -- Quick response time for bubble blowing
        if bubbleEnabled and #selectedBubbleActions > 0 then
            -- Handle blow bubble (always use quick response time)
            if table.find(selectedBubbleActions, "BlowBubble") then
                pcall(function()
                    game:GetService("ReplicatedStorage")
                        :WaitForChild("Shared")
                        :WaitForChild("Framework")
                        :WaitForChild("Network")
                        :WaitForChild("Remote")
                        :WaitForChild("Event")
                        :FireServer("BlowBubble")
                end)
            end
        end
    end
end)

-- Separate task for selling bubbles with custom timer
task.spawn(function()
    while true do
        if bubbleEnabled and table.find(selectedBubbleActions, "SellBubble") then
            pcall(function()
                game:GetService("ReplicatedStorage")
                    :WaitForChild("Shared")
                    :WaitForChild("Framework")
                    :WaitForChild("Network")
                    :WaitForChild("Remote")
                    :WaitForChild("Event")
                    :FireServer("SellBubble")
            end)
            task.wait(sellBubbleInterval) -- Use custom sell interval
        else
            task.wait(0.5) -- Check again after a short delay
        end
    end
end)

-- ISLANDS TAB IMPLEMENTATION
local IslandsTeleportSection = Tabs.Islands:AddSection("Island Teleportation")

IslandsTeleportSection:AddParagraph({
    Title = "Island TP (Tween)",
    Content = "Choose an island and smoothly tween to it."
})

local islandNames = {
    "Floating Island",
    "Outer Space",
    "Twilight",
    "The Void",
    "Zen"
}

local selectedIsland = "Floating Island"

IslandsTeleportSection:AddDropdown("IslandDropdown", {
    Title = "Select Island",
    Values = islandNames,
    Multi = false,
    Default = 1,
    Callback = function(value)
        selectedIsland = value
    end
})

local function tweenToIsland(islandName)
    local player = game.Players.LocalPlayer
    local char = player.Character or player.CharacterAdded:Wait()
    local hrp = char:WaitForChild("HumanoidRootPart")

    local islands = workspace.Worlds["The Overworld"].Islands
    local destination

    if islandName == "The Void" then
        destination = islands["The Void"].Island or islands["The Void"]
    elseif islandName == "Zen" then
        destination = islands.Zen.Island
    else
        destination = islands[islandName] and islands[islandName].Island
    end

    if destination then
        local part = destination.PrimaryPart or destination:FindFirstChildWhichIsA("BasePart", true)
        if part then
            local goal = {}
            goal.CFrame = part.CFrame + Vector3.new(0, 5, 0)

            local tween = TweenService:Create(hrp, TweenInfo.new(2, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), goal)
            tween:Play()

            Fluent:Notify({
                Title = "Tweening...",
                Content = "Moving to " .. islandName,
                Duration = 3
            })
        else
            Fluent:Notify({
                Title = "Error",
                Content = "No BasePart found in island.",
                Duration = 3
            })
        end
    else
        Fluent:Notify({
            Title = "Error",
            Content = "Island not found.",
            Duration = 3
        })
    end
end

IslandsTeleportSection:AddButton({
    Title = "Tween to Island",
    Description = "Smoothly move to the selected island.",
    Callback = function()
        tweenToIsland(selectedIsland)
    end
})

-- CLAIM TAB IMPLEMENTATION
local ClaimSection = Tabs.Claim:AddSection("Chests & Gifts")

ClaimSection:AddParagraph({
    Title = "Auto Chest & Gift Claimer",
    Content = "Select items to auto-claim below.\n\nNote: To claim a Golden Chest, you must have a Golden Key.\nEach Golden Chest requires one Golden Key.\n\nIf it looks like a chest or gift wasn't claimed, it's likely just a visual bug. The reward is still given."
})

ClaimSection:AddParagraph({
    Title = "IMPORTANT: Proximity Requirement",
    Content = "You must be near the chest/gift for claims to work. Each chest and gift has a proximity detection range. Make sure to teleport to the correct island where the chest/gift is located before trying to claim it."
})

local autoClaimRunning = false
local selectedItems = {}
local claimInterval = 5 -- Default interval in seconds

-- UPDATED: Using the exact remote paths provided by the user and adding wheel spin
local claimMap = {
    ["Void Chest"] = { "ClaimChest", "Void Chest" },
    ["Golden Chest"] = { "UnlockRiftChest", "golden-chest" },
    ["Giant Chest"] = { "ClaimChest", "Giant Chest" },
    ["Rift Gift"] = { "ClaimRiftGift", "gift-rift" },
    ["Free Wheel Spin"] = { "ClaimFreeWheelSpin" }
}

-- Dropdown with added Free Wheel Spin
local dropdown = ClaimSection:AddDropdown("ClaimDropdown", {
    Title = "Select Items to Claim",
    Description = "Choose which ones to auto-claim.",
    Values = { "Void Chest", "Golden Chest", "Giant Chest", "Rift Gift", "Free Wheel Spin" },
    Multi = true,
    Default = {},
})

dropdown:OnChanged(function(val)
    selectedItems = {}
    for name, isEnabled in pairs(val) do
        if isEnabled then
            selectedItems[name] = true
        end
    end
end)

-- Toggle for auto claiming
ClaimSection:AddToggle("AutoClaimToggle", {
    Title = "Enable Auto Claim",
    Default = false,
    Callback = function(state)
        autoClaimRunning = state

        if autoClaimRunning then
            task.spawn(function()
                while autoClaimRunning do
                    for name, active in pairs(selectedItems) do
                        if active and claimMap[name] then
                            local args = claimMap[name]
                            pcall(function()
                                -- Fire server event with correct arguments
                                game:GetService("ReplicatedStorage")
                                    :WaitForChild("Shared")
                                    :WaitForChild("Framework")
                                    :WaitForChild("Network")
                                    :WaitForChild("Remote")
                                    :WaitForChild("Event")
                                    :FireServer(unpack(args))
                            end)
                            task.wait(0.5) -- Small delay between different claims
                        end
                    end
                    task.wait(claimInterval) -- Wait before next claim cycle
                end
            end)
        end
    end
})

-- Claim interval adjustment
ClaimSection:AddInput("ClaimIntervalInput", {
    Title = "Claim Interval (seconds)",
    Default = "5",
    Placeholder = "Enter claim interval...",
    Numeric = true,
    Finished = true,
    Callback = function(value)
        local num = tonumber(value)
        if num and num > 0 then
            claimInterval = num
            Fluent:Notify({
                Title = "Claim Interval Updated",
                Content = "Chest/Gift claim interval set to " .. num .. " seconds",
                Duration = 2
            })
        else
            Fluent:Notify({
                Title = "Invalid Input",
                Content = "Please enter a positive number",
                Duration = 2
            })
        end
    end
})

-- For users who want to claim wheel spin separately
local WheelSpinSection = Tabs.Claim:AddSection("Free Wheel Spin")

WheelSpinSection:AddButton({
    Title = "Claim Free Wheel Spin Now",
    Description = "Instantly claim a free wheel spin (one-time)",
    Callback = function()
        local args = {"ClaimFreeWheelSpin"}
        game:GetService("ReplicatedStorage")
            :WaitForChild("Shared")
            :WaitForChild("Framework")
            :WaitForChild("Network")
            :WaitForChild("Remote")
            :WaitForChild("Event")
            :FireServer(unpack(args))
        
        Fluent:Notify({
            Title = "Wheel Spin",
            Content = "Attempted to claim free wheel spin",
            Duration = 2
        })
    end
})

-- Mobile UI Toggle
local MobileSection = Tabs.Settings:AddSection("Mobile Settings")

MobileSection:AddParagraph({
    Title = "Mobile UI Toggle",
    Content = "For mobile users: Click the button below to add a toggle button that lets you hide/show the GUI."
})

MobileSection:AddButton({
    Title = "Load Mobile Toggle Button",
    Description = "Creates a small button to hide/show the GUI",
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/JiwooAXH/script/main/Toggle-GUi", true))()
        Fluent:Notify({
            Title = "Mobile Toggle Loaded",
            Content = "You can now use the toggle button to hide/show the GUI",
            Duration = 5
        })
    end
})

-- SaveManager Setup
local SaveSection = Tabs.Settings:AddSection("Config Management")

InterfaceManager:SetLibrary(Fluent)
SaveManager:SetLibrary(Fluent)
SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({})

InterfaceManager:SetFolder("FluentScriptHub")
SaveManager:SetFolder("FluentScriptHub/example-config")

InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)

Window:SelectTab(1)

Fluent:Notify({
    Title = "Script Loaded",
    Content = "The script has been loaded successfully.",
    Duration = 3
})

SaveManager:LoadAutoloadConfig()
